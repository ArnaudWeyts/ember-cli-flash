{"version":3,"file":"flash-messages.js","sources":["../../src/services/flash-messages.js"],"sourcesContent":["/* eslint-disable ember/no-computed-properties-in-native-classes */\nimport { equal, sort, mapBy } from '@ember/object/computed';\nimport Service from '@ember/service';\nimport { typeOf, isNone } from '@ember/utils';\nimport { warn, assert } from '@ember/debug';\nimport { set, get, setProperties, computed } from '@ember/object';\nimport { classify } from '@ember/string';\nimport { A as emberArray } from '@ember/array';\nimport FlashMessage from '../flash/object';\nimport objectWithout from '../utils/object-without';\nimport { getOwner } from '@ember/application';\nimport flashMessageOptions from '../utils/flash-message-options';\nimport getWithDefault from '../utils/get-with-default';\n\nexport default class FlashMessagesService extends Service {\n  @(equal('queue.length', 0).readOnly())\n  isEmpty;\n\n  @(mapBy('queue', '_guid').readOnly())\n  _guids;\n\n  @(sort('queue', function (a, b) {\n    if (a.priority < b.priority) {\n      return 1;\n    } else if (a.priority > b.priority) {\n      return -1;\n    }\n    return 0;\n  }).readOnly())\n  arrangedQueue;\n\n  constructor() {\n    super(...arguments);\n    this._setDefaults();\n    this.queue = emberArray();\n  }\n\n  willDestroy() {\n    super.willDestroy(...arguments);\n    this.clearMessages();\n  }\n\n  add(options = {}) {\n    this._enqueue(this._newFlashMessage(options));\n\n    return this;\n  }\n\n  clearMessages() {\n    const flashes = this.queue;\n\n    if (isNone(flashes)) {\n      return;\n    }\n\n    flashes.forEach((flash) => flash.destroyMessage());\n    flashes.clear();\n\n    return this;\n  }\n\n  registerTypes(types = emberArray()) {\n    types.forEach((type) => this._registerType(type));\n\n    return this;\n  }\n\n  peekFirst() {\n    return this.queue.firstObject;\n  }\n\n  peekLast() {\n    return this.queue.lastObject;\n  }\n\n  getFlashObject() {\n    const errorText = 'A flash message must be added before it can be returned';\n    assert(errorText, this.queue.length);\n\n    return this.peekLast();\n  }\n\n  _newFlashMessage(options = {}) {\n    assert(\n      'The flash message cannot be empty when preventDuplicates is enabled.',\n      this.defaultPreventDuplicates ? options.message : true,\n    );\n    assert(\n      'The flash message cannot be empty when preventDuplicates is enabled.',\n      options.preventDuplicates ? options.message : true,\n    );\n\n    const flashService = this;\n    const allDefaults = getWithDefault(this, 'flashMessageDefaults', {});\n    const defaults = objectWithout(allDefaults, ['types', 'preventDuplicates']);\n\n    const flashMessageOptions = Object.assign({}, defaults, { flashService });\n\n    for (let key in options) {\n      const value = get(options, key);\n      const option = this._getOptionOrDefault(key, value);\n\n      set(flashMessageOptions, key, option);\n    }\n\n    return FlashMessage.create(flashMessageOptions);\n  }\n\n  _getOptionOrDefault(key, value) {\n    const defaults = getWithDefault(this, 'flashMessageDefaults', {});\n    const defaultOption = get(defaults, key);\n\n    if (typeOf(value) === 'undefined') {\n      return defaultOption;\n    }\n\n    return value;\n  }\n\n  @computed\n  get flashMessageDefaults() {\n    const config = getOwner(this).resolveRegistration('config:environment');\n    const overrides = getWithDefault(config, 'flashMessageDefaults', {});\n    return flashMessageOptions(overrides);\n  }\n\n  _setDefaults() {\n    const defaults = getWithDefault(this, 'flashMessageDefaults', {});\n\n    for (let key in defaults) {\n      const classifiedKey = classify(key);\n      const defaultKey = `default${classifiedKey}`;\n\n      set(this, defaultKey, defaults[key]);\n    }\n\n    this.registerTypes(getWithDefault(this, 'defaultTypes', emberArray()));\n  }\n\n  _registerType(type) {\n    assert('The flash type cannot be undefined', type);\n\n    this[type] = (message, options = {}) => {\n      const flashMessageOptions = Object.assign({}, options);\n      setProperties(flashMessageOptions, { message, type });\n\n      return this.add(flashMessageOptions);\n    };\n  }\n\n  _hasDuplicate(guid) {\n    return this._guids.includes(guid);\n  }\n\n  _enqueue(flashInstance) {\n    const instancePreventDuplicates = flashInstance.preventDuplicates;\n    const preventDuplicates =\n      typeof instancePreventDuplicates === 'boolean'\n        ? // always prefer instance option over global option\n          instancePreventDuplicates\n        : this.defaultPreventDuplicates;\n\n    if (preventDuplicates) {\n      const guid = flashInstance._guid;\n\n      if (this._hasDuplicate(guid)) {\n        warn(\n          'Attempting to add a duplicate message to the Flash Messages Service',\n          false,\n          {\n            id: 'ember-cli-flash.duplicate-message',\n          },\n        );\n        return;\n      }\n    }\n\n    return this.queue.pushObject(flashInstance);\n  }\n}\n"],"names":["FlashMessagesService","_dec","equal","readOnly","_dec2","mapBy","_dec3","sort","a","b","priority","_class","Service","constructor","arguments","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_setDefaults","queue","emberArray","willDestroy","clearMessages","add","options","_enqueue","_newFlashMessage","flashes","isNone","forEach","flash","destroyMessage","clear","registerTypes","types","type","_registerType","peekFirst","firstObject","peekLast","lastObject","getFlashObject","errorText","assert","length","defaultPreventDuplicates","message","preventDuplicates","flashService","allDefaults","getWithDefault","defaults","objectWithout","flashMessageOptions","Object","assign","key","value","get","option","_getOptionOrDefault","set","FlashMessage","create","defaultOption","typeOf","flashMessageDefaults","config","getOwner","resolveRegistration","overrides","classifiedKey","classify","defaultKey","setProperties","_hasDuplicate","guid","_guids","includes","flashInstance","instancePreventDuplicates","_guid","warn","id","pushObject","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor"],"mappings":"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"}